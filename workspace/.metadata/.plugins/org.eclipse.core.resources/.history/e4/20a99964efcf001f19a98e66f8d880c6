package com.cathaybk.demo.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cathaybk.demo.model.CoinDeskInfo;
import com.cathaybk.demo.model.CoinDeskInfo.CurrencyInfo;
import com.cathaybk.demo.model.CoinDeskResponse;
import com.cathaybk.demo.service.CoinDeskService;

@RestController
public class CoinDeskController {

    @Autowired
    private CoinDeskService coinDeskService;

//    @GetMapping("/api/coinDesk")
//    public CoinDeskResponse getCoinDeskInfo() {
//        CoinDeskResponse response = coinDeskService.getCoinDeskData();
//        
//        // 格式化時間
//        String formattedTime = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(new Date());
//        
//        // 回傳轉換過的資料
//        return new CoinDeskResponse(formattedTime, response.getBpi());
//    }
    
    @GetMapping("/api/coinDesk")
    public CoinDeskInfo getCoinDeskInfo() {
        // 獲取 CoinDesk API 資料
        CoinDeskResponse response = coinDeskService.getCoinDeskData();

        // 1. 格式化時間
        String formattedTime = formatTime(response.getTime().getUpdated());

        // 2. 創建新的幣別資訊
        List<CurrencyInfo> currencyInfoList = createCurrencyInfo(response.getBpi());

        // 3. 回傳新 API 資料
        return new CoinDeskInfo(formattedTime, currencyInfoList);
    }

    // 時間格式化
    private String formatTime(String updated) {
        try {
            SimpleDateFormat inputFormat = new SimpleDateFormat("MMM dd, yyyy HH:mm:ss z");
            Date date = inputFormat.parse(updated);
            SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
            return outputFormat.format(date);
        } catch (Exception e) {
            return "Invalid Time";
        }
    }

    // 創建幣別資訊
    private List<CurrencyInfo> createCurrencyInfo(Map<String, CoinDeskResponse.Bpi> bpi) {
        return bpi.values().stream()
                .map(b -> new CurrencyInfo(b.getCode(), b.getDescription(), b.getRate()))
                .toList();
    }
    
}
