package com.cathaybk.demo.model;


import java.time.LocalDateTime;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PrePersist;
import javax.persistence.Table;

import org.springframework.format.annotation.DateTimeFormat;

import lombok.Getter;
import lombok.Setter;


@Entity
@Getter
@Setter
@Table(name = "currencydb")
public class Currency {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "ID")
	private Long id;
	
	@Column(name = "CODE")
    private String code;  // 幣別代碼
    
	@Column(name = "NAME")
    private String name;  // 幣別中文名稱
    
	@Column(name = "RATE")
    private String rate;  // 匯率
    
	@Column(name = "SYMBOL")
    private String symbol;  // 圖示
    
	@Column(name = "DESCRIPTION")
    private String description;  // 說明
    
	@Column(name = "RATEFLOAT")
    private String rateFloat;  // 匯率浮點
	
	@Column(name = "CREATEDATE")
	@DateTimeFormat(pattern = "yyyy/MM/dd HH:mm:ss")
    private LocalDateTime createDate;  // 建立時間
    
    @Column(name = "UPDATEDATE")
    @DateTimeFormat(pattern = "yyyy/MM/dd HH:mm:ss")
    private LocalDateTime updateDate;  // 更新時間

    @PrePersist
    protected void onCreate() {
        if (this.createDate == null) {
            this.createDate = LocalDateTime.now();
        }
        if (this.updateDate == null) {
            this.updateDate = LocalDateTime.now();
        }
    }

	@Override
	public String toString() {
		return "Currency [id=" + id + ", code=" + code + ", name=" + name + ", rate=" + rate + ", symbol=" + symbol
				+ ", description=" + description + ", rateFloat=" + rateFloat + ", createDate=" + createDate
				+ ", updateDate=" + updateDate + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((code == null) ? 0 : code.hashCode());
		result = prime * result + ((createDate == null) ? 0 : createDate.hashCode());
		result = prime * result + ((description == null) ? 0 : description.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((rate == null) ? 0 : rate.hashCode());
		result = prime * result + ((rateFloat == null) ? 0 : rateFloat.hashCode());
		result = prime * result + ((symbol == null) ? 0 : symbol.hashCode());
		result = prime * result + ((updateDate == null) ? 0 : updateDate.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Currency other = (Currency) obj;
		if (code == null) {
			if (other.code != null)
				return false;
		} else if (!code.equals(other.code))
			return false;
		if (createDate == null) {
			if (other.createDate != null)
				return false;
		} else if (!createDate.equals(other.createDate))
			return false;
		if (description == null) {
			if (other.description != null)
				return false;
		} else if (!description.equals(other.description))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (rate == null) {
			if (other.rate != null)
				return false;
		} else if (!rate.equals(other.rate))
			return false;
		if (rateFloat == null) {
			if (other.rateFloat != null)
				return false;
		} else if (!rateFloat.equals(other.rateFloat))
			return false;
		if (symbol == null) {
			if (other.symbol != null)
				return false;
		} else if (!symbol.equals(other.symbol))
			return false;
		if (updateDate == null) {
			if (other.updateDate != null)
				return false;
		} else if (!updateDate.equals(other.updateDate))
			return false;
		return true;
	}
    
    
   

}
