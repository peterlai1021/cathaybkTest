package com.cathaybk.demo.controller;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.cathaybk.demo.model.Currency;
import com.cathaybk.demo.model.CurrencyRepository;
import com.cathaybk.demo.service.CurrencyService;

@RestController
public class CurrencyController {

    @Autowired
    private CurrencyService currencyService;

    @RequestMapping(value = "/currencies/list", method = RequestMethod.POST)
    public List<Currency> getAllCurrencies() {
        return currencyService.getAllCurrencies();
    }
    
    @RequestMapping(value = "/currencies/{id}", method = RequestMethod.GET)
    public Optional<Currency> getCurrenciesById(@PathVariable Long id) {
        return currencyService.getCurrenciesById(id);
    }

    @RequestMapping(value = "/currencies/create", method = RequestMethod.POST)
    public Currency createCurrency(@RequestBody Currency currency) {
        return currencyService.createCurrency(currency);
    }

    @RequestMapping(value = "/currencies/update", method = RequestMethod.POST)
    public Currency updateCurrency(@PathVariable Long id, @RequestBody Currency currency) {

    	Optional<Currency> OptionalCurrency = currencyService.getCurrenciesById(id);
    	
    	Currency existingCurrency = OptionalCurrency.get();
    	
    	existingCurrency.setCode(currency.getCode());
    	existingCurrency.setName(currency.getName());
    	existingCurrency.setRate(currency.getRate());
    	existingCurrency.setSymbol(currency.getSymbol());
    	existingCurrency.setDescription(currency.getDescription());
    	existingCurrency.setRateFloat(currency.getRateFloat());
    	existingCurrency.setUpdateDate(LocalDateTime.now());
    	
    	return existingCurrency;
    }

    @RequestMapping(value = "/currencies/delete/{id}", method = RequestMethod.POST)
    public boolean deleteCurrency(@PathVariable Long id) {
        
    	currencyService.deleteCurrencyById(id);
        
        return true;
        
    }
}